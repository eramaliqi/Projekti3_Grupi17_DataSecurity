package ds;

import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;

public class DESAlgorithm extends Application {

    private TextArea inputField;
    private TextField keyField;
    private TextArea outputLabel;
    
    
    @Override
    public void start(Stage stage) {
    
    Label inputLabel = new Label("Input Text:");
    inputField = new TextArea();

    Label keyLabel = new Label("DES Key:");
    keyField = new TextField();
    keyField.setPrefWidth(300);

    Button encryptButton = new Button("Encrypt");
    Button decryptButton = new Button("Decrypt");

    outputLabel = new TextArea();
    outputLabel.setPrefWidth(300);
    
    VBox root = new VBox(10);
    root.setAlignment(Pos.CENTER);
    root.setPadding(new Insets(20));
    root.getChildren().addAll(inputLabel, inputField, keyLabel, keyField, encryptButton, decryptButton, outputLabel);

    Scene scene = new Scene(root, 400, 400);

    encryptButton.setOnAction(event -> encrypt());
    decryptButton.setOnAction(event -> decrypt());

    stage.setScene(scene);
    stage.show();    
    }
    
    private void encrypt() {
        try {
            String input = inputField.getText();
            String key = keyField.getText();

            byte[] keyBytes = key.getBytes(StandardCharsets.UTF_8);
            SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "DES");

            Cipher des = Cipher.getInstance("DES/ECB/PKCS5Padding");
            des.init(Cipher.ENCRYPT_MODE, keySpec);

            byte[] inputBytes = input.getBytes(StandardCharsets.UTF_8);
            byte[] encryptedBytes = des.doFinal(inputBytes);

            StringBuilder encryptedHex = new StringBuilder();
            for (byte b : encryptedBytes) {
                encryptedHex.append(String.format("%02X", b));
            }
            
            outputLabel.setText("Encrypted Text: " + encryptedHex.toString());
        } catch (Exception e) {
            e.printStackTrace();
            outputLabel.setText("Encryption Error");
        }
    }
     private void decrypt() {
     try {
            String input = inputField.getText();
            String key = keyField.getText();

            byte[] keyBytes = key.getBytes(StandardCharsets.UTF_8);
            SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "DES");

            Cipher des = Cipher.getInstance("DES/ECB/PKCS5Padding");
            des.init(Cipher.DECRYPT_MODE, keySpec);
            
            byte[] inputBytes = new byte[input.length() / 2];
            for (int i = 0; i < input.length(); i += 2) {
                String hexByte = input.substring(i, i + 2);
                inputBytes[i / 2] = (byte) Integer.parseInt(hexByte, 16);
            }

            byte[] decryptedBytes = des.doFinal(inputBytes);

            String decrypted = new String(decryptedBytes, StandardCharsets.UTF_8);

            outputLabel.setText("Decrypted Text: " + decrypted);
        }catch (Exception e) {
            e.printStackTrace();
            outputLabel.setText("Decryption Error");
        }
     }
     
      public static void main(String[] args) {
        launch(args);
    }
}
